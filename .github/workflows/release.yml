name: Release

on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'web-app/backend/package-lock.json'

    - name: Install dependencies
      working-directory: ./web-app/backend
      run: npm ci

    - name: Run tests
      working-directory: ./web-app/backend
      run: npm run test:ci

    - name: Bump version
      if: github.event_name == 'workflow_dispatch'
      working-directory: ./web-app/backend
      run: |
        npm version ${{ github.event.inputs.version }}
        echo "NEW_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push release image
      uses: docker/build-push-action@v5
      with:
        context: ./web-app
        file: ./web-app/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.NEW_VERSION || github.event.release.tag_name }}

    - name: Create GitHub Release
      if: github.event_name == 'workflow_dispatch'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: Release v${{ env.NEW_VERSION }}
        body: |
          Release v${{ env.NEW_VERSION }}
          
          Docker image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.NEW_VERSION }}`
        draft: false
        prerelease: false

